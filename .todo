☐ # Project Todo List @started(24-07-23 13:14)

☐ ## Task 1: Initialize the Project @bakseck
- [x] Create a new Go module for the project
  - [x] Run `go mod init wget-clone`
  - [x] Run `go mod tidy` to install necessary dependencies

## Task 2: Set Up Cobra @bakseck
- [x] Install Cobra package
  - [x] Run `go get -u github.com/spf13/cobra@latest`
- [x] Initialize Cobra in the project
  - [x] Create a `cmd` directory
  - [x] Create `root.go` file inside `cmd` directory
  - [x] Set up the root command with Cobra

## Task 3: Implement Basic File Download @bakseck
- [x] Add logic to handle URL input
  - [x] Ensure the URL argument is provided
  - [x] Fetch the URL content using `http.Get`
- [x] Add logic to save the downloaded content to a file
  - [x] Create a file to save the content
  - [x] Use `io.Copy` to write the response body to the file
- [x] Add logic to display download start and end times
  - [x] Print start time before download
  - [x] Print end time after download

## Task 4: Implement Output Filename Flag @bakseck
- [x] Add an output filename flag to the root command
  - [x] Define a `--output` or `-O` flag in `root.go`
  - [x] Use the provided filename to save the downloaded content

## Task 5: Implement Directory Path Flag @bakseck
- [ ] Add a directory path flag to the root command
  - [ ] Define a `--path` or `-P` flag in `root.go`
  - [ ] Use the provided path to save the downloaded content

## Task 6: Implement Rate Limit Flag @bcoulibaly
- [ ] Add a rate limit flag to the root command
  - [ ] Define a `--rate-limit` flag in `root.go`
  - [ ] Implement logic to control the download speed based on the provided rate limit

## Task 7: Implement Background Download Flag @bakseck
- [x] Add a background download flag to the root command
  - [x] Define a `--background` or `-B` flag in `root.go`
  - [x] Implement logic to run the download in the background and log output to a file

## Task 8: Implement Multiple File Download @sefaye
- [ ] Add a flag for downloading multiple files
  - [ ] Define a `--input` or `-i` flag to accept a file with multiple URLs
  - [ ] Implement logic to read URLs from the input file and download them asynchronously

## Task 9: Implement Website Mirroring @bcoulibaly
- [ ] Add a flag for mirroring a website
  - [ ] Define a `--mirror` flag in `root.go`
  - [ ] Implement logic to download an entire website and save it locally
- [ ] Add options to refine mirroring
  - [ ] Implement `--reject` or `-R` flag to reject certain file types
  - [ ] Implement `--exclude` or `-X` flag to exclude specific directories
  - [ ] Implement `--convert-links` flag to convert links for offline viewing

## Task 10: Testing and Refinement @bakseck, @sefaye, @bcoulibaly
- [x] Test basic download functionality
- [x] Test output filename flag functionality
- [x] Test background download functionality
- [ ] Test directory path flag functionality
- [ ] Test rate limit flag functionality
- [ ] Test multiple file download functionality
- [ ] Test website mirroring functionality
- [ ] Refine code based on test results
- [ ] Ensure proper error handling and logging throughout the application

## Task 11: Documentation   @bakseck
- [ ] Update the README file with usage instructions and examples for each feature
- [ ] Add comments to the code for better understanding and maintainability